<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jxf.ufang.dao.UfangUserDao">

    <sql id="userColumns">
    	a.id,
    	a.type AS "type",
    	a.brn_id AS "brn.id",
    	a.username AS "username",
    	a.password AS "password",
    	a.emp_no AS "empNo",
		a.emp_nam AS "empNam",
		a.email AS "email",
		a.head_image AS "headImage",
		a.member_id AS "member.id",
		a.bind_status AS "bindStatus",
		a.is_enabled AS "isEnabled",
		a.is_locked AS "isLocked",
		a.login_ip AS "loginIp",
		a.login_date AS "loginDate",
		a.rmk AS "rmk",
		a.create_by AS "createBy.empNo",
		a.create_time,
		a.update_by AS "updateBy.empNo",
		a.update_time,
		a.del_flag ,
		c1.brn_no AS "brn.brnNo",
    	c1.brn_name AS "brn.brnName",
    	c1.parent_id AS "brn.parent.id",
    	c1.parent_ids AS "brn.parentIds",
    	c1.free_data AS "brn.freeData",
    	c2.brn_name AS "brn.parent.brnName",
    	d.id AS "brn.area.id",
    	d.name AS "brn.area.name",
    	d.parent_id AS "brn.area.parent.id",
    	d.parent_ids AS "brn.area.parentIds"

    </sql>
    
    <resultMap type="UfangUser" id="ufangUserResultMap">
		<id column="id" property="id"/>
		<result column="type" property="type" typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"/>
		<result column="bindStatus" property="bindStatus" typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"/>
		<result column="isEnabled"  property="isEnabled" javaType="Boolean" jdbcType="CHAR" />		
		<result column="isLocked"  property="isLocked" javaType="Boolean" jdbcType="CHAR" />
	</resultMap>
	
    <resultMap type="UfangRole" id="roleResult" >
		<id property="id" column="id" />
		<result property="roleName" column="roleName" />
		<result property="dataScope" column="dataScope" />
		<result property="rmk" column="rmk" />
	</resultMap>
	
    <sql id="userJoins">
		LEFT JOIN UFANG_BRN c1 ON c1.id = a.brn_id
		LEFT JOIN UFANG_BRN c2 ON c2.id = c1.parent_id
		LEFT JOIN SYS_AREA d ON d.id = c1.area_id 
    </sql>
	
	<!-- 根据系统编号获得用户 -->
	<select id="get" resultMap="ufangUserResultMap">
		SELECT
			<include refid="userColumns"/>
		FROM UFANG_USER a
		<include refid="userJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<!-- 根据EmpNo查User -->
	<select id="findByEmpNo" resultMap="ufangUserResultMap">
		SELECT
			<include refid="userColumns"/>
		FROM UFANG_USER a
		<include refid="userJoins"/>
		WHERE a.emp_no = #{userEmpNo}
	</select>
	
	<!-- 根据用户名查询用户 -->
	<select id="getByUsername" resultMap="ufangUserResultMap">
		SELECT
			<include refid="userColumns"/>
		FROM UFANG_USER a
		<include refid="userJoins"/>
		WHERE a.username = #{username} 
		AND a.del_flag = '0'
	</select>
	

	<!-- 分页查询用户信息 -->
	<select id="findList" resultMap="ufangUserResultMap">
		SELECT
			<include refid="userColumns"/>
		FROM UFANG_USER a
		<include refid="userJoins"/>
		<if test="role != null and role.id != null and role.id != ''">
			JOIN UFANG_USER_ROLE ur ON ur.user_id = a.id AND ur.role_id = #{role.id}
		</if>
		WHERE a.id != 1 
		AND a.del_flag = #{DEL_FLAG_NORMAL}
		<if test="brn != null and brn.id != null and brn.id != ''">
			AND (c1.id = #{brn.id} OR c1.parent_ids LIKE 
					<if test="dbName == 'oracle'">'%,'||#{brn.id}||',%')</if>
					<if test="dbName == 'mysql'">CONCAT('%,', #{brn.id}, ',%'))</if>
		</if> 
		<if test="username != null and username != ''">
			AND a.username like 
					<if test="dbName == 'oracle'">'%'||#{username}||'%'</if>
					<if test="dbName == 'mysql'">CONCAT('%', #{username}, '%')</if>
		</if>
		<if test="empNam != null and empNam != ''">
			AND a.emp_nam like 
					<if test="dbName == 'oracle'">'%'||#{empNam}||'%'</if>
					<if test="dbName == 'mysql'">CONCAT('%', #{empNam}, '%')</if>
		</if>
		<!-- 数据范围过滤 -->
		${sqlMap.dsf}
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.emp_no ASC
			</otherwise>
		</choose>
	</select>
	
	<!-- 根据BrnId获取用户（树查询用户时用） -->
	<select id="findUserByBrnId" resultType="UfangUser" useCache="true">
		SELECT
			a.id, a.emp_nam, a.username
		FROM UFANG_USER a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
			AND a.brn_id = #{brn.id}
		ORDER BY a.emp_nam
	</select>
	
	<!-- 查询全部用户数目 -->
	<select id="findAllCount" resultType="long">
		SELECT
			COUNT(1)
		FROM UFANG_USER a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
	</select>
	
	<!-- 插入用户 -->
	<insert id="insert" parameterType="UfangUser">
		INSERT INTO UFANG_USER(
			id,
			type,
			brn_id,  
			username, 
			password, 
			emp_no, 
			emp_nam, 
			email, 
			member_id,
			bind_status,
			is_enabled,
			is_locked,
			rmk, 
			create_by, 
			create_time, 
			update_by, 
			update_time, 			 
			del_flag
		) VALUES (
			#{id}, 
			#{type,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler},
			#{brn.id},  
			#{username}, 
			#{password}, 
			#{empNo}, 
			#{empNam}, 
			#{email}, 
			#{member.id},
			#{bindStatus,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler},
			#{isEnabled, javaType=Boolean, jdbcType=CHAR},
			#{isLocked, javaType=Boolean, jdbcType=CHAR},
			#{rmk}, 
			#{createBy.empNo}, 
			#{createTime}, 
			#{updateBy.empNo}, 
			#{updateTime}, 			
			#{delFlag}
		)
	</insert>
	
	<!-- 更新用户 -->
	<update id="update" parameterType="UfangUser">
		UPDATE UFANG_USER SET 
		    type = #{type,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler},
			brn_id = #{brn.id},
			username = #{username}, 
			password = #{password}, 
			emp_no = #{empNo}, 
			emp_nam = #{empNam}, 
			email = #{email}, 
			member_id = #{member.id},
			bind_status = #{bindStatus,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler},
			is_enabled = #{isEnabled, javaType=Boolean, jdbcType=CHAR},
			is_locked = #{isLocked, javaType=Boolean, jdbcType=CHAR},				
			rmk = #{rmk},
			update_by = #{updateBy.empNo}, 
			update_time = #{updateTime}
		WHERE id = #{id}
	</update>
	<!-- 查找用户角色关联表数据 -->
	<select id="findUserRoleList" resultMap="roleResult">
		SELECT 
		    a.id AS "id",
	    	a.role_name AS roleName,
			a.data_scope AS dataScope,
			a.rmk AS "rmk",
			a.create_by AS "createBy.empNo",
			a.create_time AS "createTime",
			a.update_by AS "updateBy.empNo",
			a.update_time AS "updateTime",
			a.del_flag AS "delFlag"
		FROM UFANG_ROLE a
		LEFT JOIN UFANG_USER_ROLE ur ON ur.role_id = a.id
		LEFT JOIN UFANG_USER u ON u.id = ur.user_id
		WHERE a.del_flag = #{DEL_FLAG_NORMAL} 
		AND u.id = #{id}
		ORDER BY a.role_name
	</select>
	
	<!-- 删除用户和角色关联表数据 -->
	<delete id="deleteUserRole">
		DELETE FROM UFANG_USER_ROLE WHERE user_id = #{id}
	</delete>
	
	<!-- 插入用户和角色关联表数据 -->
	<insert id="insertUserRole">
		INSERT INTO UFANG_USER_ROLE(user_id, role_id)
		<foreach collection="roleList" item="role" separator=" union all ">
			SELECT #{id}, #{role.id} FROM dual
		</foreach>
	</insert>
	
	<!-- 更新用户密码 -->
	<update id="updatePasswordById">
		UPDATE UFANG_USER SET 
			password = #{password},
			update_by = #{updateBy.empNo}, 
			update_time = #{updateTime}
		WHERE id = #{id}
	</update>
	
	<!-- 更新登录信息，如登录IP、登录时间 -->
	<update id="updateLoginInfo">
		UPDATE UFANG_USER SET 
			login_ip = #{loginIp}, 
			login_Date = #{loginDate} 
		WHERE id = #{id}
	</update>
	
	<!-- 逻辑删除用户 -->
	<update id="delete">
		UPDATE UFANG_USER SET 
			update_by = #{updateBy.empNo}, 
			update_time = #{updateTime},
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>

	
	<!-- 查询最大的用户号 -->
	<select id="getMaxEmpNo" resultType="String" >
		SELECT
			max(a.emp_no) as no
		FROM UFANG_USER a WHERE  a.brn_id = #{brnId} 
	</select>
	<!-- 根据用户号查找用户名 -->
	<select id="getEmpNamByEmpNo" resultType="String" >
		SELECT
			a.emp_nam as empNam
		FROM UFANG_USER a where a.emp_no = #{empNo}
	</select>
		
	<!-- 查询某机构下的用户数 -->
	<select id="getCountBrnUser" resultType="int" parameterType="Long">
		SELECT
			COUNT(*) as sumcount
		FROM UFANG_USER a
		WHERE a.del_flag = '0' 
		AND a.brn_id = #{brnId}
	</select>
</mapper>