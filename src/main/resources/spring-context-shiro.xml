<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.0.xsd"
	default-lazy-init="true">

	<description>Shiro Configuration</description>

    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:wyjt.properties" />
	
	<!-- filterChainDefinitions过滤器中对于路径的配置是有顺序的，当找到匹配的条目之后容器不会再继续寻找。因此带有通配符的路径要放在后面。  -->
	<bean name="shiroFilterChainDefinitions" class="java.lang.String">
		<constructor-arg>
			<value>
				/static/** = anon
				/userfiles/** = anon
				${adminPath}/common/** = anon
				${adminPath}/cas = cas
				${adminPath}/login = adminAuthc
				${adminPath}/logout = adminLogout
				${adminPath}/** = admin
				${ufangPath}/common/** = anon
				${ufangPath}/cas = cas
				${ufangPath}/login = ufangAuthc
				${ufangPath}/logout = ufangLogout
				${ufangPath}/** = ufang
			</value>
		</constructor-arg>
	</bean>
	
	<!-- 安全认证过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="${adminPath}/login" />
		<property name="successUrl" value="${adminPath}/login" /> 
		<property name="filters">
            <map>
                <entry key="cas" value-ref="casFilter"/>
                <entry key="adminAuthc" value-ref="adminFormAuthenticationFilter"/>
                <entry key="ufangAuthc" value-ref="ufangFormAuthenticationFilter"/>
                <entry key="admin" value-ref="adminUserFilter" />
                <entry key="ufang" value-ref="ufangUserFilter" />
                <entry key="adminLogout" value-ref="adminLogoutFilter" />
                <entry key="ufangLogout" value-ref="ufangLogoutFilter" />
            </map>
        </property>
		<property name="filterChainDefinitions">
			<ref bean="shiroFilterChainDefinitions"/>
		</property>
	</bean>
    <!-- CAS认证过滤器 -->  
	<bean id="casFilter" class="org.apache.shiro.cas.CasFilter">  
		<property name="failureUrl" value="${adminPath}/login"/>
	</bean>
	
    <bean id="adminFormAuthenticationFilter" class="com.jxf.svc.security.shiro.filter.AdminFormAuthenticationFilter">
    	<property name="loginUrl" value="${adminPath}/login" />
		<property name="successUrl" value="${adminPath}/login" /> 
    </bean> 
    <bean id="ufangFormAuthenticationFilter" class="com.jxf.svc.security.shiro.filter.UfangFormAuthenticationFilter"> 
        <property name="loginUrl" value="${ufangPath}/login" />
		<property name="successUrl" value="${ufangPath}/login" />
    </bean> 
    <bean id="adminUserFilter" class="com.jxf.svc.security.shiro.filter.AdminUserFilter"> 
        <property name="redirectUrl" value="${adminPath}/login" /> 
    </bean> 
    <bean id="ufangUserFilter" class="com.jxf.svc.security.shiro.filter.UfangUserFilter"> 
        <property name="redirectUrl" value="${ufangPath}/login" /> 
    </bean> 
    <bean id="adminLogoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter"> 
        <property name="redirectUrl" value="${adminPath}/login" /> 
    </bean> 
    <bean id="ufangLogoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter"> 
        <property name="redirectUrl" value="${ufangPath}/login" /> 
    </bean> 
	
	<!-- 配置使用自定义登录认证器，实现多Realm认证，并且可以指定特定Realm处理特定类型的验证 -->
    <bean id="authenticator" class="com.jxf.svc.security.shiro.CustomModularRealmAuthenticator">
        <!-- 配置认证策略，只要有一个Realm认证成功即可，并且返回所有认证成功信息 -->
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
        </property>
    </bean>	
    <!-- 配置使用自定义权限认证器，实现多Realm认证 -->
    <bean id="authorizer" class="com.jxf.svc.security.shiro.CustomModularRealmAuthorizer"></bean>
    <!-- 多个Realm认证 -->
    <bean id="adminAuthorizingRealm" class="com.jxf.svc.security.shiro.realm.AdminAuthorizingRealm"/> 
	<bean id="ufangAuthorizingRealm" class="com.jxf.svc.security.shiro.realm.UfangAuthorizingRealm"/>
    
	<!-- 定义Shiro安全管理配置 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="sessionManager" ref="sessionManager" />
		<property name="cacheManager" ref="shiroCacheManager" />
		<property name="authenticator" ref="authenticator"/>
		<property name="authorizer" ref="authorizer"/>
		<!-- 可以配置多个Realm，其实会把realms属性赋值给ModularRealmAuthenticator的realms属性 -->
        <property name="realms">
            <list>
                <ref bean="adminAuthorizingRealm" />
                <ref bean="ufangAuthorizingRealm"/>
            </list>
        </property>
	</bean>
	<!-- 自定义会话管理配置 -->
	<bean id="sessionManager" class="com.jxf.svc.security.shiro.session.SessionManager"> 
		<property name="sessionDAO" ref="sessionDAO"/>
		
		<!-- 会话超时时间，单位：毫秒  -->
		<property name="globalSessionTimeout" value="${session.sessionTimeout}"/>
		
		<!-- 定时清理失效会话, 清理用户直接关闭浏览器造成的孤立会话   -->
		<property name="sessionValidationInterval" value="${session.sessionTimeoutClean}"/>
        <!-- <property name="sessionValidationSchedulerEnabled" value="false"/> -->
 		<property name="sessionValidationSchedulerEnabled" value="true"/>
 		
		<property name="sessionIdCookie" ref="sessionIdCookie"/>
		<property name="sessionIdCookieEnabled" value="true"/>
	</bean>
	
	<!-- 指定本系统SESSIONID, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,
		当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
	    <constructor-arg name="name" value="jinxinfu.session.id"/>
	</bean>

	<!-- 自定义Session存储容器 -->
	<bean id="sessionDAO" class="com.jxf.svc.security.shiro.session.CacheSessionDAO">
		<property name="sessionIdGenerator" ref="idGen" />
		<property name="activeSessionsCacheName" value="activeSessionsCache" />
		<property name="cacheManager" ref="shiroCacheManager" />
	</bean>
	
	 <!-- 缓存管理器 使用Ehcache实现 -->
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManager" ref="cacheManager"/>
	</bean>
	
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<!-- AOP式方法级权限检查  -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
	</bean>
	
</beans>